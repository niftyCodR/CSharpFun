<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace CSharpFun
{
    public static partial class Result
    {
		public static Result<TResult, TError> Bind<T, TError, TResult>(this Result<T, TError> result, Func<T, Result<TResult, TError>> bind)
        {
			return result.Match(bind, Result<TResult, TError>.Error);
        }

		public static Result<T, TResultError> BindError<T, TError, TResultError>(this Result<T, TError> result, Func<TError, Result<T, TResultError>> bind)
        {
            return result.Match(Result<T, TResultError>.Success, bind);
        }
<# for(var typeParamCount=2;typeParamCount<=16;typeParamCount++)
{
	var range = Enumerable.Range(1, typeParamCount);
	var typeParams = string.Join(", ", range.Select(i => $"T{i}"));
	var bindParams = string.Join(", ", range.Select(i => $"tuple.Item{i}"));
#>

		public static Result<TResult, TError> Bind<<#=typeParams #>, TError, TResult>(this Result<(<#=typeParams #>), TError> result, Func<<#=typeParams #>, Result<TResult, TError>> bind)
		{
			return result.Match(tuple => bind(<#=bindParams #>), Result<TResult, TError>.Error);
		}

		public static Result<(<#=typeParams #>), TResultError> BindError<<#=typeParams #>, TError, TResultError>(this Result<(<#=typeParams #>), TError> result, Func<TError, Result<(<#=typeParams #>), TResultError>> bind)
        {
            return result.Match(Result<(<#=typeParams #>), TResultError>.Success, bind);
        }
<#} #>
    }
}
