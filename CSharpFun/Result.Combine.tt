<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Linq;

namespace CSharpFun
{
    public static partial class Result
    {
<# for(var typeParamCount=2;typeParamCount<=20;typeParamCount++)
{
	var range = Enumerable.Range(1, typeParamCount);
	var typeParams = string.Join(", ", range.Select(i => $"T{i}"));
	var results = string.Join(", ", range.Select(i => $"Result<T{i}, TError> r{i}"));
	var resultErrors = string.Join(", ", range.Select(i => $"Result<T{i}, Lst<TError>> r{i}"));
	var paramNames = string.Join(", ", range.Select(i => $"r{i}"));
	var valueRetrievingExpressions = string.Join(", ", range.Select(i => $"GetValueOrThrow(r{i})"));
#>
		public static Result<(<#=typeParams #>), Lst<TError>> Combine<<#=typeParams #>, TError>(<#=results #>)
		{
			var errors = GetErrors(<#=paramNames #>);

            return errors.Length > 0
                ? Result<(<#=typeParams #>), Lst<TError>>.Error(new Lst<TError>(errors))
                : Success((<#=valueRetrievingExpressions #>));
		}

		public static Result<(<#=typeParams #>), Lst<TError>> Combine<<#=typeParams #>, TError>(<#=resultErrors #>)
        {
            var errors = GetErrors(r1, r2);

            return errors.Length > 0
                ? Result<(<#=typeParams #>), Lst<TError>>.Error(new Lst<TError>(errors))
                : Success((<#=valueRetrievingExpressions #>));
        }

<#} #>
        private static TError[] GetErrors<TError>(params Result<Unit, TError>[] results)
        {
            return results
				.Where(r => r.IsError)
				.Select(GetErrorOrThrow)
				.ToArray();
        }

		private static TError[] GetErrors<TError>(params Result<Unit, Lst<TError>>[] results)
        {
            return results
				.Where(r => r.IsError)
				.SelectMany(res => res.GetErrorOrThrow())
				.ToArray();
        }
    }
}
