<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace CSharpFun
{
    public static partial class Result
    {
		public static Result<TResult, TError> Map<T, TError, TResult>(this Result<T, TError> result, Func<T, TResult> selector)
        {
			if (selector == null) throw new ArgumentNullException(nameof(selector));

            return result.Match(value => Result<TResult, TError>.Success(selector(value)), Result<TResult, TError>.Error);
        }

		public static Result<T, TResultError> MapError<T, TError, TResultError>(this Result<T, TError> result, Func<TError, TResultError> selector)
        {
			if (selector == null) throw new ArgumentNullException(nameof(selector));

            return result.Match(Result<T, TResultError>.Success, error => Result<T, TResultError>.Error(selector(error)));
        }
<# for(var typeParamCount=2;typeParamCount<=16;typeParamCount++)
{
	var range = Enumerable.Range(1, typeParamCount);
	var typeParams = string.Join(", ", range.Select(i => $"T{i}"));
	var bindParams = string.Join(", ", range.Select(i => $"tuple.Item{i}"));
#>

		public static Result<TResult, TError> Map<<#=typeParams #>, TError, TResult>(this Result<(<#=typeParams #>), TError> result, Func<<#=typeParams #>, TResult> selector)
		{
			if (selector == null) throw new ArgumentNullException(nameof(selector));

			return result.Match(tuple => Result<TResult, TError>.Success(selector(<#=bindParams #>)), Result<TResult, TError>.Error);
		}
<#} #>
    }
}