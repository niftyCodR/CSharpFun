<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Linq;

namespace CSharpFun
{
    public static partial class Option
    {<# for(var typeParamCount=2;typeParamCount<=20;typeParamCount++)
{
	var range = Enumerable.Range(1, typeParamCount);
	var typeParams = string.Join(", ", range.Select(i => $"T{i}"));
	var options = string.Join(", ", range.Select(i => $"Option<T{i}> o{i}"));
	var paramNames = string.Join(", ", range.Select(i => $"o{i}"));
	var valueRetrievingExpressions = string.Join(", ", range.Select(i => $"GetValueOrThrow(o{i})"));
#>

		public static Option<(<#=typeParams #>)> Combine<<#=typeParams #>>(<#=options #>)
		{
			return HasNone(<#=paramNames #>)
                ? Option<(<#=typeParams #>)>.None
                : Option<(<#=typeParams #>)>.Some((<#=valueRetrievingExpressions #>));
		}
<#} #>

		private static bool HasNone(params Option<Unit>[] options)
        {
            return options.Any(o => o.IsNone);
        }
    }
}