<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Diagnostics.Contracts;
using System.Threading.Tasks;

namespace CSharpFun
{
    public static partial class Result
    {<#	for(var typeParamCount=2;typeParamCount<=16;typeParamCount++)
{
	var range = Enumerable.Range(1, typeParamCount);
	var typeParams = string.Join(", ", range.Select(i => $"T{i}"));
	var bindParams = string.Join(", ", range.Select(i => $"tuple.Item{i}"));
#>

		[Pure]
		public static TResult Match<<#=typeParams #>, TError, TResult>(this Result<(<#=typeParams #>), TError> result, Func<<#=typeParams #>, TResult> onSuccess, Func<TError, TResult> onError)
		{
			return result.Match(tuple => onSuccess(<#=bindParams #>), onError);
		}

		[Pure]
		public static async Task<TResult> Match<<#=typeParams #>, TError, TResult>(this Task<Result<(<#=typeParams #>), TError>> asyncResult, Func<<#=typeParams #>, TResult> onSuccess, Func<TError, TResult> onError)
        {
            if (asyncResult == null) throw new ArgumentNullException(nameof(asyncResult));
            if (onSuccess == null) throw new ArgumentNullException(nameof(onSuccess));
            if (onError == null) throw new ArgumentNullException(nameof(onError));

            var result = await asyncResult;

            return result.Match(tuple => onSuccess(<#=bindParams #>), onError);
        }

		public static Result<(<#=typeParams #>), TError> OnSuccess<<#=typeParams #>, TError>(this Result<(<#=typeParams #>), TError> result, Action<<#=typeParams #>> onSuccess)
		{
			return result.Match(tuple =>
		    {
		        onSuccess(<#=bindParams #>);
		        return result;
		    }, _ => result);
		}
<#} #>
    }
}