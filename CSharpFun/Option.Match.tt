<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Diagnostics.Contracts;
using System.Threading.Tasks;

namespace CSharpFun
{
	public static partial class Option
    {<# for(var typeParamCount=2;typeParamCount<=16;typeParamCount++)
{
	var range = Enumerable.Range(1, typeParamCount);
	var typeParams = string.Join(", ", range.Select(i => $"T{i}"));
	var bindParams = string.Join(", ", range.Select(i => $"tuple.Item{i}"));
#>

		[Pure]
		public static TResult Match<<#=typeParams #>, TResult>(this Option<(<#=typeParams #>)> option, Func<<#=typeParams #>, TResult> onSome, Func<TResult> onNone)
		{
            if (onSome == null) throw new ArgumentNullException(nameof(onSome));
            if (onNone == null) throw new ArgumentNullException(nameof(onNone));

			return option.Match(tuple => onSome(<#=bindParams #>), onNone);
		}

		[Pure]
		public static async Task<TResult> Match<<#=typeParams #>, TResult>(this Task<Option<(<#=typeParams #>)>> asyncOption, Func<<#=typeParams #>, TResult> onSome, Func<TResult> onNone)
		{
			if (asyncOption == null) throw new ArgumentNullException(nameof(asyncOption));
            if (onSome == null) throw new ArgumentNullException(nameof(onSome));
            if (onNone == null) throw new ArgumentNullException(nameof(onNone));

			var option = await asyncOption;

			return option.Match(onSome, onNone);
		}

		public static Option<(<#=typeParams #>)> OnSome<<#=typeParams #>>(this Option<(<#=typeParams #>)> option, Action<<#=typeParams #>> onSome)
        {
            return option.Match(
                tuple =>
                {
                    onSome(<#=bindParams #>);
                    return option;
                },
                () => option
            );
        }
<#} #>
    }
}