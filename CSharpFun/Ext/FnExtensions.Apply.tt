<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace CSharpFun.Ext
{
    public static partial class FnExtensions
    {
		public static Func<TResult> Apply<T1, TResult>(this Func<T1, TResult> fn, T1 value)
        {
            return () => fn(value);
        }
<# for(var typeParamCount=2;typeParamCount<=16;typeParamCount++)
{
	var range = Enumerable.Range(1, typeParamCount);
	var typeParams = string.Join(", ", range.Select(i => $"T{i}"));
	var returnTypeParams = string.Join(", ", Enumerable.Range(2, typeParamCount-1).Select(i => $"T{i}"));
	var values = string.Join(", ", Enumerable.Range(2, typeParamCount-1).Select(i => $"value{i}"));
#>

        public static Func<<#=returnTypeParams #>, TResult> Apply<<#=typeParams #>, TResult>(this Func<<#=typeParams #>, TResult> fn, T1 value)
        {
            return (<#=values #>) => fn(value, <#=values #>);
        }
<#} #>
    }
}